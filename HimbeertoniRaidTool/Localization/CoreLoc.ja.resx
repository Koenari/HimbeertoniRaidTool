<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
        Microsoft ResX Schema

        Version 1.3

        The primary goals of this format is to allow a simple XML format 
        that is mostly human readable. The generation and parsing of the 
        various data types are done through the TypeConverter classes 
        associated with the data types.

        Example:

        ... ado.net/XML headers & schema ...
        <resheader name="resmimetype">text/microsoft-resx</resheader>
        <resheader name="version">1.3</resheader>
        <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
        <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
        <data name="Name1">this is my long string</data>
        <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
        <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
            [base64 mime encoded serialized .NET Framework object]
        </data>
        <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
            [base64 mime encoded string representing a byte array form of the .NET Framework object]
        </data>

        There are any number of "resheader" rows that contain simple 
        name/value pairs.

        Each data row contains a name, and value. The row also contains a 
        type or mimetype. Type corresponds to a .NET class that support 
        text/value conversion through the TypeConverter architecture. 
        Classes that don't support this are serialized and stored with the 
        mimetype set.

        The mimetype is used for serialized objects, and tells the 
        ResXResourceReader how to depersist the object. This is currently not 
        extensible. For a given mimetype the value must be set accordingly:

        Note - application/x-microsoft.net.object.binary.base64 is the format 
        that the ResXResourceWriter will generate, however the reader can 
        read any of the formats listed below.

        mimetype: application/x-microsoft.net.object.binary.base64
        value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

        mimetype: application/x-microsoft.net.object.soap.base64
        value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

        mimetype: application/x-microsoft.net.object.bytearray.base64
        value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" xmlns="" id="root">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1"/>
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3"/>
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required"/>
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>1.3</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.3500.0,
            Culture=neutral, PublicKeyToken=b77a5c561934e089
        </value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.3500.0,
            Culture=neutral, PublicKeyToken=b77a5c561934e089
        </value>
  </resheader>
  <data name="WelcomeUi_text">
    <value>Himbeertoni Raid Tool へようこそ。レイドグループを管理するあなたの仲間です。
            チャットで「/lootmaster」（または「/lm」）と入力し、LootMasterを開いて旅を始めましょう（もしくは下のボタン）。既にあなたのキャラクターが追加されています。
            次に、虫眼鏡アイコンを使用するか、右クリックでキャラクターを調べることで、現在の装備品を取得できます。
            ゲーム内のキャラクターを調べるときに、GroupやSoloのタブに追加されたキャラクターの装備品を常に更新します。
            この機能を実際に使用するには、Soloタブの右側にある「+ボタン」を使ってグループを追加する必要があります。これには2つの選択肢があります。
            "新規作成"では、自分ですべてを入力することができます。また、"現在のグループを編集
            "を選択することで、グループをパーティに集め（または次の集まりを待ち）、プラグインに自動で登録を任せることができます。ただし、グループ名とプレイヤーのニックネームを手動で設定する必要があります。"
            もし、起動時に戦利品マスタを開くようにしたい場合は、オプションをざっと見てみることをお勧めします。より詳しい説明はwikiを参照してください
            :)
        </value>
  </data>
  <data name="WelcomeUi_Title">
    <value>Himbeertoni Raid Tool へようこそ</value>
  </data>
  <data name="ConfigUi_hdg_ui">
    <value>UI</value>
  </data>
  <data name="ConfigUi_cb_tt_hideInCombat">
    <value>キャラクターが戦闘時、すべてのウィンドウを非表示にする</value>
  </data>
  <data name="ConfigUi_cb_hideInCombat">
    <value>戦闘中に隠す</value>
  </data>
  <data name="ConfigUi_in_autoSaveInterval">
    <value>自動保存の間隔 (分)</value>
  </data>
  <data name="ConfigUi_hdg_AutoSave">
    <value>自動保存</value>
  </data>
  <data name="ConfigUi_cb_periodicSave">
    <value>定期的に保存する</value>
  </data>
  <data name="ConfigUi_cb_tt_periodicSave" xml:space="preserve">
        <value>このプラグインのすべてのデータを定期的に保存します。（ゲームのクラッシュ時、データが失われないようにします）</value>
    </data>
  <data name="WelcomeUi_btn_OpenLootMaster">
    <value>LootMasterを開く</value>
  </data>
  <data name="WelcomeUi_btn_tt_OpenLootMaster">
    <value>LootMaster のメインウィンドウを開く (/lootmaster)</value>
  </data>
  <data name="WelcomeUi_btn_OpenOptions">
    <value>オプションを開く</value>
  </data>
  <data name="WelcomeUi_btn_tt_OpenOptions">
    <value>設定オプションを表示 (/hrt config)</value>
  </data>
  <data name="Welcomeui_btn_openWiki">
    <value>Wikiを開く</value>
  </data>
  <data name="Welcomeui_btn_tt_openWiki">
    <value>Wikiをブラウザで開きますか?</value>
  </data>
  <data name="WelcomeUi_btn_close">
    <value>閉じる</value>
  </data>
  <data name="WelcomeUi_btn_tt_close">
    <value>このウィンドウを閉じる</value>
  </data>
  <data name="ChangelogCategory_BiS" xml:space="preserve">
        <value>最適装備</value>
    </data>
</root>